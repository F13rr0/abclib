#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Nov  6 09:57:56 2023

@author: alainbonardi
"""

import os
import shutil
from tkinter.filedialog import askdirectory
import pdPatchLib as pdLib

#declaration of global variables
#the list of object indices
objectList = []
#the list of message indices
msgList = []
#the list of connection indices
connectionList = []
#the list on inlet~ indices
inletTildeList = []
#the list of outlet~ indices
outletTildeList = []
#index of the compiled object from Faust code
faustObjectIndex = 0
#name of the compiled object from Faust code
faustObjectName = 'abc'

#initialization of global variables
def init():
    global objectList, msgList, connectionList
    global inletTildeList, outletTildeList
    global faustObjectIndex, faustObjectName
    objectList = []
    msgList = []
    connectionList = []
    inletTildeList = []
    outletTildeList = []
    faustObjectIndex = 0

    
def parsePdCode(myCode):
    global objectList, msgList, connectionList
    global inletTildeList, outletTildeList, snakeOutIndex, snakeInIndex
    global ySnakeOut, ySnakeIn
    global faustObjectIndex, faustObjectName
    init()

    i = 0
    objectIndex = 0
    connectionIndex = 0
    
    for line in myCode:
        # print(str(i)+" "+line)

        if pdLib.isInletTilde(line):
            inletTildeList.append(objectIndex)
            
        if pdLib.isOutletTilde(line):
            outletTildeList.append(objectIndex)   
            
        if pdLib.isFaustObject(line, faustObjectName):
            faustObjectIndex = objectIndex
            
        if pdLib.isObj(line):
            objectList.append(objectIndex)
            objectIndex = objectIndex + 1
            
        if pdLib.isMsg(line):
            msgList.append(objectIndex)
            objectIndex = objectIndex + 1
            
        if pdLib.isText(line):
            objectIndex = objectIndex + 1

        if pdLib.isConnection(line):
            connectionList.append(connectionIndex)
            connectionIndex = connectionIndex + 1
        
        i = i+1



def dump(myCode):
    global objectList, msgList, connectionList
    global inletTildeList, outletTildeList
    global faustObjectIndex, faustObjectName
    print("____________________________________________________________")
    print("\n")
    print("Number of lines in the code = "+str(len(myCode)))
    print(str(len(objectList))+" objects")
    print(str(len(msgList))+" msgs")
    print(str(len(connectionList))+ " connections")
    print(str(len(inletTildeList))+ " inlet~")
    print(str(len(outletTildeList))+ " outlet~")
    print("faustObjectIndex = " + str(faustObjectIndex))
    print("faustObjectName = "+faustObjectName)
    print("\n")
    print("____________________________________________________________")



def generalProcess(fileName, patchFolder, objectName):
    global faustObjectIndex, faustObjectName
    f = open(fileName, 'r')
    pdCodeUI = f.readlines()
    faustObjectName = objectName
    #
    pathFaustgen = os.path.join(patchFolder,"faustgen")
    #
    # parses the original code
    parsePdCode(pdCodeUI)
    #keeps the original number of inlet~~
    inletTildeNumber = len(inletTildeList)
    #print("inlet="+str(inletTildeNumber))
    #keeps the original number of outlet~
    outletTildeNumber = len(outletTildeList)
    
    #creation of the multichannel patch without user interface
    #creating a new list of lines
    pdCodeFG = []
    fgFileName = faustObjectName+"~.pd"
    fgFilePath = os.path.join(pathFaustgen, fgFileName)
    #patch window
    #we start by mandatory objects
    #starts the patch by the canvas
    pdCodeFG.append("#N canvas 0 0 400 350 10;\n")
    #object 0 is the patch inlet
    inletId = 0
    pdCodeFG.append("#X obj 30 30 inlet;\n")
    #object 1 is the Faust compiled object
    faustObjectId = 1
    pdCodeFG.append("#X obj 30 130 faustgen2~ "+faustObjectName+"_f;\n")
    #object 2 is the outlet
    outletId = 2
    pdCodeFG.append("#X obj 30 230 outlet;\n")
    #object 3 is the text
    commentId = 3
    pdCodeFG.append("#X text 30 280 generated by makeFaustgenAbstractions.py / abclib - CICM;\n")
    #object 4 is the ID of the first inlet~ (of course if there is one)
    #we add the inlet~
    inletTildeId = 4
    if (inletTildeNumber > 0):
        for i in range(inletTildeNumber):
            pdCodeFG.append("#X obj "+str(30+70*(i+1))+" 30 inlet~;\n")
    #we add the outlet~
    outletTildeId = inletTildeId + inletTildeNumber
    if (outletTildeNumber > 0):
        for i in range(outletTildeNumber):
            pdCodeFG.append("#X obj "+str(30+70*(i+1))+" 230 outlet~;\n")
    #we add the connections
    #connects the patch inlet to the first inlet of the compiled Faust object
    pdCodeFG.append("#X connect 0 0 "+str(faustObjectId)+" 0;\n")
    #connects the control outlet of the compiled object to the patch outlet
    pdCodeFG.append("#X connect "+str(faustObjectId)+" 0 "+str(outletId)+" 0;\n")
    if (inletTildeNumber > 0):
        for i in range(inletTildeNumber):
            pdCodeFG.append("#X connect "+str(inletTildeId+i)+" 0 "+str(faustObjectId)+" "+str(i+1)+";\n")
    if (outletTildeNumber > 0):
        for i in range(outletTildeNumber):
            pdCodeFG.append("#X connect "+str(faustObjectId)+" "+str(i+1)+" "+str(outletTildeId+i)+" 0;\n")

    pdLib.savePdCode(pdCodeFG, fgFilePath)
    print("==>canvas processed")

    f.close()

#directory = '/Users/alainbonardi/Dropbox/faustFactory/abclib_factory/abclib_labo_brainstorming/manipulationPureDataEnPython/patchs'
directory = askdirectory()
print("____________________________________________________________")
print("____________________________________________________________")
print("makeFaustgenAbstractions.py Python program - CICM  - 2023")
print("Creating PureData faustgen abstractions")
print("from canvas got in Faust online compilation")
print("All canvas in this directory: "+directory)
print("will be processed")
print("____________________________________________________________")
print("____________________________________________________________")

pathFaustgen = os.path.join(directory,"faustgen")
if (os.path.exists(pathFaustgen)):
    print("Existing faustgen directory_the previous one is deleted")
    shutil.rmtree(pathFaustgen)
os.mkdir(pathFaustgen)
for fileName in os.listdir(directory):
    f = os.path.join(directory, fileName)
    if (os.path.isfile(f)) and (fileName != ".DS_Store"):
        #print("filename="+fileName)
        fullFileName = os.path.join(directory, fileName)
        myPatchSplit = fileName.partition('.')
        myProcessName = myPatchSplit[0]
        print("____________________________________________________________")
        if fullFileName.endswith('.pd_darwin'):
            print(fileName+" is not a .pd PureData file -- not processed")

        if (fullFileName.endswith('.pd')) and not(fullFileName.endswith('-help.pd')):
            print("Creating "+myProcessName+"~.pd")     
            generalProcess(fullFileName, directory, myProcessName)


