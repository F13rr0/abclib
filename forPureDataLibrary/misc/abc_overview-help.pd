#N canvas 808 400 1326 866 10;
#X obj 14 6 cnv 15 500 25 empty empty abclib_Library 20 12 0 18 #606060 #fcfcfc 0;
#X obj 13 824 abc_helpcredit;
#X obj 14 32 cnv 15 500 25 empty empty 20_years_of_research_teaching_and_creation_in_mixed_music_=>_Faust 20 12 0 12 #606060 #fcfcfc 0;
#X text 28 641 The abclib library also provides utility objects for mixed music: chowning-like panners \, matrices \, envelopes \, an attack and release detector \, synthesizers (additive \, substractive \, sound coat \, sound grain \, Risset's bell).;
#X text 27 700 Teaching mixed music at Paris 8 University helped us in many implementation choices \, thinking of practical requirements for composers \, to allow them to test their patches either in multichannel academic studios or at home in simple stereo.;
#X text 30 110 CICM (Centre de recherches Informatique et Cr√©ation Musicale) - University Paris 8;
#X text 29 135 http://cicm.mshparisnord.org/;
#X text 30 85 abclib library 20 years of research \, teaching and creation in mixed music using Faust language;
#X text 32 213 - spatial sound processing and synthesis using ambisonic;
#X text 32 225 - multi-channel sound processing;
#X text 32 237 - utility objects for mixed music;
#X text 31 177 abclib library is the result of 20 years of research \, teaching and creation in mixed music \, expressed as a set of codes in Faust language. The main topics addressed are:;
#X text 30 269 It comes as a prolongation of the HOA library developed by the CICM between 2012 and 2015 which provided an impressive framework for ambisonics: hoalibrary.mshparisnord.fr;
#X text 29 327 abclib takes over HOA \, proposing a large set of processes written in Faust language and implemented at various ambisonic orders (from 1 to 7 \, which means from 3 to 15 parallel instances). It also puts the emphasis \, outside the scope of ambisonics on multi-channel sound processing with various dimensions from 1 to 16 parallel instances. The use of Faust language guarantees software durability and interoperability between Mac and Windows systems \, as well as Max and PureData softwares. Faust files are available on a Github repository : https://github.com/alainbonardi/abclib/;
#X text 29 149 Alain Bonardi \, Paul Goutmann \, David Fierro & Adrien Zanni - 2019-2023, f 71;
#X text 28 446 The Faust processes are compiled to Max or PureData objects. Help patches are also provided as well as some overview patches or graphic abstractions based on jitter (in Max) or cyclone library (in PureData). In the field of ambisonics \, 2D objects are provided \, including general objects (encoders \, decoders \, optimizers \, scopes) \, geometry objects (maps \, mirrors \, rotates \, specific trajectory generators) \, and a set of spatial sound processes (decorrelators \, delays \, granulators \, ring modulators) in both 'syn' and 'fx' modes. The names of the ambisonic objects in 2D use '2d' as a prefix: for instance abc_2d_decoder3~ is an ambisonic decoder in 2D at order 3 Multi-channel sound process objects do not use '2d' prefix: for instance \, abc_delays16 implements a set of 16 parallel delay lines. Multi-channel sound processors include flangers \, parallel and sequential delays \, frequency shifters \, harmonizers \, granulators \, reverberations.;
#X obj 620 192 abc_2d_decoder1_4~;
#X text 587 168 control input;
#X text 595 66 1) Convention for inlets and outlets of objects compiled from Faust, f 37;
#X text 597 100 - the first inlet on the left receives control messages;
#X text 597 114 - the other inlets receive signals;
#X text 597 129 - left output delivers control messages;
#X text 597 143 - the other outlets provide signals;
#X text 588 210 control output, f 7;
#X text 653 169 3 signals in (order 1 of ambisonics);
#X text 652 215 4 signals out (quadriphony);
#X text 632 33 Using abclib objects and abstractions in PureData;
#X text 593 256 2) Canvas generated for each object compiled from Faust, f 36;
#X obj 596 295 abc_2d_decoder1_4;
#X text 595 445 Just by removing the final ~ \, you get the canvas presenting the control interface of the process;
#X obj 597 549 abc_2d_decoder1_4_m;
#X text 593 517 They all have one inlet on the left for control messages \, and one multichannel inlet~ on the right;
#X text 593 571 They all have one outlet on the left for control messages \, and one multichannel outlet~ on the right;
#X text 26 757 With 0.54 version of PureData \, abclib has adopted multichannel processing and simplification of connection (from 1.1.0 version), f 65;
#X text 593 489 3) Since version 1.1.0 of abclib \, we provide multichannel by abstractions without interface (with _m suffix);
#X text 594 616 4) Since version 1.1.0 \, we also provide multichannel abstractions with the corresponding user interface (with _m_ui suffix);
#X obj 599 655 abc_2d_decoder1_4_m_ui;
#X msg 951 259 \; pd open abc_tutorial01.pd /Users/alainbonardi/Documents/Github/abclib/forPureDataLibrary/misc;
#X obj 1052 461 file cwd;
#X obj 1029 524 print CWD;
#X obj 1073 418 bng 16 250 50 0 empty empty empty 0 -8 0 10 #fcfcfc #000000 #000000;
#X msg 975 373 \; pd open abc_tutorial01.pd \$1;
#X obj 1103 514 route symbol;
#X connect 38 0 41 0;
#X connect 40 0 38 0;
